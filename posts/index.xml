<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - Jorge Ortiz-Fuentes&#39; DevBites</title>
        <link>https://jorgeortiz.dev/posts/</link>
        <description>All Posts | Jorge Ortiz-Fuentes&#39; DevBites</description>
        <generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&amp;copy; 2025 Jorge D. Ortiz Fuentes</copyright><lastBuildDate>Mon, 29 Sep 2025 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://jorgeortiz.dev/posts/" rel="self" type="application/rss+xml" /><item>
    <title>Rust unit testing: builtin tools</title>
    <link>https://jorgeortiz.dev/posts/rust_unit_testing_tools_builtin/</link>
    <pubDate>Mon, 22 Sep 2025 00:00:00 &#43;0000</pubDate>
    <author>Jorge Ortiz-Fuentes</author>
    <guid>https://jorgeortiz.dev/posts/rust_unit_testing_tools_builtin/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/header-image.jpg" referrerpolicy="no-referrer">
            </div><p>
As many other modern languages, regarding testing, Rust comes with batteries included.  As you have seen in the previous
articles of this series, you don&#39;t need to take any extra steps to be able to write and run unit tests for your code.
It is clear where you have to put them, how to run them, and even cargo has a subcommand for finding and running
them, and reporting the results.  Could we ask for more?</p>]]></description>
</item>
<item>
    <title>Full-Stack Apps</title>
    <link>https://jorgeortiz.dev/posts/full_stack_apps/</link>
    <pubDate>Tue, 16 Sep 2025 00:00:00 &#43;0000</pubDate>
    <author>Jorge Ortiz-Fuentes</author>
    <guid>https://jorgeortiz.dev/posts/full_stack_apps/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/header-image.jpg" referrerpolicy="no-referrer">
            </div><p>
I must confess.  For many years, I have tried to avoid front-end web development by all means.  I didn&#39;t want to touch
it with a ten foot pole.  And the main reason was because I have never felt comfortable with having to combine HTML, CSS
and JavaScript with the nuances of each of the browsers to get the UI I wanted to produce.</p>
<p>
When it came to develop user interfaces for my applications, I have preferred to use well established APIs.  I started,
looong ago, writing some small Windows applications, moved to X Window first and then to GTK, and after a while focused
on mobile development.  Even at that stage, I jumped from PalmOS to Android and iOS, almost skipping webOS<sup class="footnote-reference"><a id="footnote-reference-1" href="#footnote-1">1</a></sup> because
of it being based on web development.</p>]]></description>
</item>
<item>
    <title>Rust unit testing: asynchronous code</title>
    <link>https://jorgeortiz.dev/posts/rust_unit_testing_async_code/</link>
    <pubDate>Wed, 10 Sep 2025 00:00:00 &#43;0000</pubDate>
    <author>Jorge Ortiz-Fuentes</author>
    <guid>https://jorgeortiz.dev/posts/rust_unit_testing_async_code/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/header-image.jpg" referrerpolicy="no-referrer">
            </div><p>
So far, we have only tested synchronous code.  I could postpone talking about asynchronous code, but I don&#39;t want you to
<em>wait</em> for it. ðŸ˜„</p>
<p>
Asynchronous code, apart from being an inexhaustible source of dad jokes, can be painful to reason about its behavior
and <a href="https://corrode.dev/blog/async/">not always recommended</a>.  We tend to think that, in a given scope, the lines above are executed before the lines
below.  It really takes experience and discipline to realize that some parts of the code can be executed at a later time
and that we may not have yet their results available.  This is important when we write our asynchronous code, but even
more when we debug it .</p>]]></description>
</item>
<item>
    <title>Rust unit testing: the not so happy path</title>
    <link>https://jorgeortiz.dev/posts/rust_unit_testing_not_so_happy_path/</link>
    <pubDate>Mon, 01 Sep 2025 00:00:00 &#43;0000</pubDate>
    <author>Jorge Ortiz-Fuentes</author>
    <guid>https://jorgeortiz.dev/posts/rust_unit_testing_not_so_happy_path/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/header-image.jpg" referrerpolicy="no-referrer">
            </div><p>
So far, we have chosen to test things that matched our expectations of how the code was supposed to work and how the
user and the environment were supposed to behave.  But, we should also plan for the scenarios in which things don&#39;t go as
expected, and still we want our program to react properly.  We should also test for these situations and those tests are
as important as the ones that check the successful use cases.</p>]]></description>
</item>
<item>
    <title>Rust unit testing: simplify your tests</title>
    <link>https://jorgeortiz.dev/posts/rust_unit_testing_simplify_tests/</link>
    <pubDate>Thu, 10 Jul 2025 00:00:00 &#43;0000</pubDate>
    <author>Jorge Ortiz-Fuentes</author>
    <guid>https://jorgeortiz.dev/posts/rust_unit_testing_simplify_tests/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/header-image.jpg" referrerpolicy="no-referrer">
            </div><p>
Now that we understand the building blocks for writing unit tests in Rust, you probably feel the urge to apply that
knowledge and fully cover your application with tests.  Don&#39;t you?  Well, I would ask you to hold your horses and apply
it gradually. We still have a lot of ground to cover, but the next sections are probably going to simplify your life
right away.</p>
<p>
Again in this article, you have the final version of the <code class="verbatim">supervillain.rs</code> file at the bottom and the repo with the
incremental commits is available <a href="https://github.com/jdortiz/detestable-me-rs">here</a>.  In case of doubt, check the code or feel free to reach me through any of my
<a href="https://jorgeortiz.dev/">social media accounts</a>.</p>]]></description>
</item>
<item>
    <title>Rust unit testing: test types</title>
    <link>https://jorgeortiz.dev/posts/rust_unit_testing_test_types/</link>
    <pubDate>Mon, 07 Jul 2025 00:00:00 &#43;0000</pubDate>
    <author>Jorge Ortiz-Fuentes</author>
    <guid>https://jorgeortiz.dev/posts/rust_unit_testing_test_types/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/header-image.jpg" referrerpolicy="no-referrer">
            </div><p>
So you have finally learned Rust and are writing cool projects with it?  Awesome!  However, as soon as your project
starts being useful and solving some actual use cases, you realize that the quality of your code is important.  Not only
that.  The larger and more complex your project becomes, the harder it is to manually test every bit of functionality
after a change.</p>
<p>
Your first temptation might be: &#34;Why should I test everything if my changes only affect this small part of the program?&#34;
And, while in some situations that might be true, more often than not our changes affect unexpected parts of our
program.</p>]]></description>
</item>
<item>
    <title>A note about taking notes (part 3)</title>
    <link>https://jorgeortiz.dev/posts/a_note_about_taking_notes_3/</link>
    <pubDate>Thu, 12 Jun 2025 00:00:00 &#43;0000</pubDate>
    <author>Jorge Ortiz-Fuentes</author>
    <guid>https://jorgeortiz.dev/posts/a_note_about_taking_notes_3/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/header-image.jpg" referrerpolicy="no-referrer">
            </div><p>
This is the last article of a series on taking notes.  In the previous ones, I shared the reasons why I think taking
notes is useful as well as some of the things that I do when I take my notes.  This article contains ways of making use
of the effort that we have put into writing those notes.  Some of them are specifically geared toward digital notes and
won&#39;t be very useful for handwritten notes, but there is one which applies only to notes on paper. ðŸ˜‰</p>]]></description>
</item>
<item>
    <title>A note about taking notes (part 2)</title>
    <link>https://jorgeortiz.dev/posts/a_note_about_taking_notes_2/</link>
    <pubDate>Fri, 06 Jun 2025 00:00:00 &#43;0000</pubDate>
    <author>Jorge Ortiz-Fuentes</author>
    <guid>https://jorgeortiz.dev/posts/a_note_about_taking_notes_2/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/header-image.jpg" referrerpolicy="no-referrer">
            </div><p>
This is the second article of a series on taking notes.  In the previous one, I listed my reasons for taking notes as
well as a few rules of thumb for deciding when it is worth to take a note about a topic.  In this article, I will focus
on the most practical aspects of note taking and I will share how I do it.  It shouldn&#39;t come as a shock that these
aren&#39;t the Note Commandments, but my experience and way of doing things.  I am quite happy with most of them, but there
is always room for improvement and I will be glad to hear from you and how you tackle the scenarios that I have
described here or any others that might be relevant.</p>]]></description>
</item>
<item>
    <title>A note about taking notes (part 1)</title>
    <link>https://jorgeortiz.dev/posts/a_note_about_taking_notes_1/</link>
    <pubDate>Mon, 02 Jun 2025 00:00:00 &#43;0000</pubDate>
    <author>Jorge Ortiz-Fuentes</author>
    <guid>https://jorgeortiz.dev/posts/a_note_about_taking_notes_1/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/header-image.jpg" referrerpolicy="no-referrer">
            </div><p>
If you are reading this, I&#39;d bet dollars to donuts you already take notes frequently.  But, if this is not the case, I
am sorry.  Not just because you are missing a great opportunity to maximize the production of your brain, but rather
because of what you have missed so far.  But, don&#39;t worry.  It ain&#39;t late to join the club.  The sooner, the better.</p>
<p>
I must also acknowledge that this is not a comprehensive guide on note taking, but rather a series of tips that I
consider useful.  Although, I will not chicken out on sharing my reasons for taking notes, the focus will be on
describing how to get the most out of them.  I am sharing my experience here and would love to hear about yours.  Feel
free to ping me in any of the social media platforms, using the links on the home page, if you need, and let me know
other tips that have been useful to you.  I am looking forward to learning more on the topic!</p>]]></description>
</item>
<item>
    <title>Set up and run AI Optimizer and Toolkit</title>
    <link>https://jorgeortiz.dev/posts/set_up_and_run_ai_optimizer_and_toolkit/</link>
    <pubDate>Mon, 26 May 2025 00:00:00 &#43;0000</pubDate>
    <author>Jorge Ortiz-Fuentes</author>
    <guid>https://jorgeortiz.dev/posts/set_up_and_run_ai_optimizer_and_toolkit/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/header-image.jpg" referrerpolicy="no-referrer">
            </div><div id="outline-container-headline-1" class="outline-2">
<h2 id="headline-1">
Intro
</h2>
<div id="outline-text-headline-1" class="outline-text-2">
<p>I have decided to create a series of pieces of content on how to use AI.  And, since there is no better tool to play
with AI than the AI Optimizer and Toolkit, I have chosen to  start by explaining how to set it up and run it.</p>
<p>
AI Optimizer and Toolkit is an Open Source project created by our team, the Microservices and AI Team.  You can use
Oracle&#39;s AI Optimizer and Toolkit to take your generative AI projects from prototype to production, independently of
their size.  Using generative AI to match your business needs is challenging and our software helps you to simplify and
accelerate the process of developing AI-based tools.  AI Optimizer and Toolkit allows you to:</p>]]></description>
</item>
</channel>
</rss>
